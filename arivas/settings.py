"""
Django settings for arivas project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()  # Load environment variables from .env file

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'error.log'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}
# Application definition

INSTALLED_APPS = [
    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "unfold.contrib.import_export",  # optional, if django-import-export package is used
    "unfold.contrib.guardian",  # optional, if django-guardian package is used
    "unfold.contrib.simple_history",  # optional, if django-simple-history package is used
    "unfold.contrib.location_field",  # optional, if django-location-field package is used
    "unfold.contrib.constance",  # 


    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'django_summernote',

    'whitenoise.runserver_nostatic',  # to disable Django's staticfiles handling in favor of WhiteNoise
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'arivas.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'arivas.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']


# # Additional security settings
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# SECURE_SSL_REDIRECT = True
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# SECURE_HSTS_SECONDS = 31536000
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True
# SECURE_REFERRER_POLICY = "strict-origin"
# SECURE_BROWSER_XSS_FILTER = True
# SECURE_CONTENT_TYPE_NOSNIFF = True

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
        # "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Media files (Uploaded images, etc.)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

SUMMERNOTE_CONFIG = {
    "iframe": True,
    "css": (
        "https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css",
    ),
}

# Django Unfold Configuration
UNFOLD = {
    "SITE_TITLE": "Arivas Pharmaceuticals",
    "SITE_HEADER": "Arivas Admin",
    "SITE_URL": "/",
    "SITE_ICON": {
        "light": lambda request: "/static/assets/images/logo.avif",  # path to your logo
        "dark": lambda request: "/static/assets/images/logo.avif",   # path to your logo
    },
    "SITE_LOGO": {
        "light": lambda request: "/static/assets/images/logo.avif",  # path to your logo
        "dark": lambda request: "/static/assets/images/logo.avif",   # path to your logo
    },
    "SITE_SYMBOL": "A",  # symbol for the sidebar
    "SITE_FAVICONS": [
        {
            "rel": "icon",
            "sizes": "32x16",
            "type": "image/png",
            "href": lambda request: "/static/assets/images/favicon.ico",
        },
    ],
    "SHOW_HISTORY": True,
    "SHOW_VIEW_ON_SITE": True,
    "ENVIRONMENT": "arivas.settings.environment_callback",
    # "DASHBOARD_CALLBACK": "arivas.settings.dashboard_callback",  # Temporarily disabled
    "COLORS": {
        "primary": {
            "50": "239 68 68",  # red-500 - Arivas red theme
            "100": "220 38 38",
            "200": "185 28 28",
            "300": "153 27 27",
            "400": "127 29 29",
            "500": "239 68 68",  # Main red
            "600": "220 38 38",
            "700": "185 28 28",
            "800": "153 27 27",
            "900": "127 29 29",
            "950": "69 10 10"
        },
        "secondary": {
            "50": "30 64 175",  # blue-800 - Secondary color
            "100": "29 78 216",
            "200": "37 99 235",
            "300": "59 130 246",
            "400": "96 165 250",
            "500": "147 197 253",
            "600": "191 219 254",
            "700": "219 234 254",
            "800": "239 246 255",
            "900": "59 130 246",
            "950": "30 64 175"
        },
    },
    "EXTENSIONS": {
        "modeltranslation": {
            "flags": {
                "en": "ðŸ‡ºðŸ‡¸",
                "hi": "ðŸ‡®ðŸ‡³",
            },
        },
    },
    "SIDEBAR": {
        "show_search": True,
        "show_all_applications": True,
        "navigation": [
            {
                "title": "Dashboard",
                "separator": True,
                "items": [
                    {
                        "title": "Analytics",
                        "icon": "dashboard",
                        "link": lambda request: "/admin/",
                    },
                ],
            },
            {
                "title": "Product Management",
                "separator": True,
                "items": [
                    {
                        "title": "Product Categories",
                        "icon": "category",
                        "link": lambda request: "/admin/app/productcategory/",
                    },
                    {
                        "title": "Products",
                        "icon": "inventory",
                        "link": lambda request: "/admin/app/product/",
                    },
                    {
                        "title": "Product Status",
                        "icon": "assignment_turned_in",
                        "link": lambda request: "/admin/app/productstatus/",
                    },
                    {
                        "title": "Price List",
                        "icon": "list_alt",
                        "link": lambda request: "/admin/app/pricelist/",
                    },
                ],
            },
            {
                "title": "Content Management",
                "separator": True,
                "items": [
                    {
                        "title": "Blog Posts",
                        "icon": "article",
                        "link": lambda request: "/admin/app/blogpost/",
                    },
                    {
                        "title": "Blog Categories",
                        "icon": "bookmark",
                        "link": lambda request: "/admin/app/blogcategory/",
                    },
                    {
                        "title": "Feature Blocks",
                        "icon": "widgets",
                        "link": lambda request: "/admin/app/feature_blocks/",
                    },
                    {
                        "title": "About Page",
                        "icon": "info",
                        "link": lambda request: "/admin/app/aboutpage/",
                    },
                ],
            },
            {
                "title": "User Management",
                "separator": True,
                "items": [
                    {
                        "title": "Users",
                        "icon": "people",
                        "link": lambda request: "/admin/auth/user/",
                    },
                    {
                        "title": "Groups",
                        "icon": "group",
                        "link": lambda request: "/admin/auth/group/",
                    },
                ],
            },
        ],
    },
    "TABS": [
        {
            "models": [
                "app.product",
                "app.productcategory",
                "app.productstatus",
            ],
            "items": [
                {
                    "title": "Product Categories",
                    "link": lambda request: "/admin/app/productcategory/",
                },
                {
                    "title": "Products",
                    "link": lambda request: "/admin/app/product/",
                },
                {
                    "title": "Product Status",
                    "link": lambda request: "/admin/app/productstatus/",
                },
            ],
        },
        {
            "models": [
                "app.blogpost",
                "app.blogcategory",
            ],
            "items": [
                {
                    "title": "Blog Posts",
                    "link": lambda request: "/admin/app/blogpost/",
                },
                {
                    "title": "Blog Categories",
                    "link": lambda request: "/admin/app/blogcategory/",
                },
            ],
        },
    ],
}

def environment_callback(request):
    """Callback to show environment in admin header"""
    return ["Development", "warning"]  # [label, color]

def dashboard_callback(request, context):
    """Callback for dashboard widgets"""
    from app.views import get_analytics_data
    
    try:
        analytics = get_analytics_data()
        
        # Return context dictionary with dashboard data
        context.update({
            'analytics': analytics,
            'dashboard_widgets': [
                {
                    "title": "Total Products",
                    "metric": analytics['total_products'],
                    "footer": f"+{analytics['total_categories']} categories",
                },
                {
                    "title": "Blog Posts", 
                    "metric": analytics['total_blog_posts'],
                    "footer": "Published articles",
                },
                {
                    "title": "Page Views (7 days)",
                    "metric": analytics['recent_visits_7_days'], 
                    "footer": f"Total: {analytics['total_page_visits']}",
                },
                {
                    "title": "Contact Forms",
                    "metric": analytics['recent_contacts'],
                    "footer": "New submissions (7 days)",
                },
            ]
        })
        return context
    except Exception as e:
        context.update({
            'dashboard_widgets': [
                {
                    "title": "Analytics",
                    "metric": "Loading...",
                    "footer": "Initializing dashboard",
                }
            ]
        })
        return context

